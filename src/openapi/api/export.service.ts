/**
 * Gom Don API
 * Gom Don API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { InlineObject } from '../model/inlineObject';
import { Responses } from '../model/responses';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class ExportService {

    protected basePath = 'https://us-central1-gomdon-74d1a.cloudfunctions.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Thêm snapshot export
     * Thêm snapshot export
     * @param image 
     * @param export_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSnapshotExport(image: Blob, export_id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addSnapshotExport(image: Blob, export_id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addSnapshotExport(image: Blob, export_id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addSnapshotExport(image: Blob, export_id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (image === null || image === undefined) {
            throw new Error('Required parameter image was null or undefined when calling addSnapshotExport.');
        }
        if (export_id === null || export_id === undefined) {
            throw new Error('Required parameter export_id was null or undefined when calling addSnapshotExport.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: this.encoder});
        }

        if (image !== undefined) {
            formParams = formParams.append('image', <any>image) as any || formParams;
        }
        if (export_id !== undefined) {
            formParams = formParams.append('export_id', <any>export_id) as any || formParams;
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/export/add-snapshot`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Phiếu xuất
     * Phiếu xuất
     * @param request_body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createExport(request_body: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Responses>;
    public createExport(request_body: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Responses>>;
    public createExport(request_body: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Responses>>;
    public createExport(request_body: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request_body === null || request_body === undefined) {
            throw new Error('Required parameter request_body was null or undefined when calling createExport.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Responses>(`${this.configuration.basePath}/export/create`,
            request_body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param export_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByIdExport(export_id: string, observe?: 'body', reportProgress?: boolean): Observable<Responses>;
    public getByIdExport(export_id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Responses>>;
    public getByIdExport(export_id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Responses>>;
    public getByIdExport(export_id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (export_id === null || export_id === undefined) {
            throw new Error('Required parameter export_id was null or undefined when calling getByIdExport.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Responses>(`${this.configuration.basePath}/export/${encodeURIComponent(String(export_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get export by status
     * get export by status
     * @param status 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByStatus(status: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Responses>;
    public getByStatus(status: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Responses>>;
    public getByStatus(status: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Responses>>;
    public getByStatus(status: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling getByStatus.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (status) {
            status.forEach((element) => {
                queryParameters = queryParameters.append('status', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Responses>(`${this.configuration.basePath}/export/get-by-status`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cập nhật trạng thái phiếu xuất
     * Cập nhật trạng thái phiếu xuất
     * @param InlineObject 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateExport(InlineObject: InlineObject, observe?: 'body', reportProgress?: boolean): Observable<Responses>;
    public updateExport(InlineObject: InlineObject, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Responses>>;
    public updateExport(InlineObject: InlineObject, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Responses>>;
    public updateExport(InlineObject: InlineObject, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (InlineObject === null || InlineObject === undefined) {
            throw new Error('Required parameter InlineObject was null or undefined when calling updateExport.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Responses>(`${this.configuration.basePath}/export/update`,
            InlineObject,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
